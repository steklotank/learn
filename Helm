bascis 
helm -- kubernetes "packet manager"
for install
$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh

Helm2 need Tiller  api version 1
Helm3 works nativly api version 2

#Helm have repository of helmcharts to manage repo use 
helm repo help
helm repo update help
helm repo add bitnami https://charts.bitnami.com/bitnami

#for search chart use 
helm search hub wordpress

# release manage
helm install my-site bitnami/wordpress
helm install my-SECOND-site bitnami/wordpress
helm list
helm uninstall my release

#customizing inline 
helm install my-release --set wordpressBlogName="Hello, world" bitnami/wordpress

helm install my-release --values custom_values.yaml bitnami/wordpress

helm pull untar bitnami/wordpress

# Lifecycle 
helm install my-site bitnami/wordpress
helm upgrade dazzling-web bitnami/nginx --version 13
helm list  #list release 
helm history #shows more history
helm rollback my-site 1

#HELMCHARTS
#to create own helmchart type
helm create chart_name
# it will create simple  chart structure with tree
# Chart.yaml contain

#templating
Predefined values
Release.Name
Release.Namespace
Release.IsUpgrade
Release.IsInstall
Release.Revision
Release.Service
Chart.Name
Chart.ApiVersion
Chart.Version
Chart.Type
Chart.Keywords
Chart.Home
Capabilities.KubeVersion
Capabilities.ApiVersions
Capabilities.HelmVersion
Capabilities.GitCommit
Capabilities.GitTreeState
Capabilities.GoVersion

custom values 
Values.replicaCount
Values.image
etc

# verifying 
helm lint ./chart_name #hilights the errors

# display chart 
helm template your_release_name ./chart_name
# if there is probplem while templating run with --debug flag
#dry-run
helm install your_release ./chart_name --dry-run

# Functions
{{ .Values.image.name }} -simple template value
{{ upper .Values.image.name }} - turn to uppercase
{{ repeat 5 .Values.image.name}} -repeat value 5 times
{{ quote .Values.image.name }} - will quote image name
most use case with pipe
{{ .Values.image.name | default "nginx" | quote }} -if there is no image helm put nginx an make it quoted
full list of funcs
https://helm.sh/docs/chart_template_guide/functions_and_pipelines/
https://helm.sh/docs/chart_template_guide/function_list/

#Conditions
{{ if .Values.some_feature.enabled }}
   lable: {{ .Values.some_feature.value }}
{{ else if eq .Values.some_feature "None"}}
    lable: default
{{ end }}

{{- if ..}} - this construct will remove spaces in resulting manifest
{{- end}}


#with
{{- with .Values.app }}
backgound: {{.ui.bg}}   # instead .Values.app.ui.bg
foregorund: {{.ui.fg}}
{{- with .database}}
user: {{.user}}
password: {{.pass}}
#Also we can reffer to Release but with Global ident $.Release.Name
{{- end }}
{{- end }}

#Aslo with with we can use in like enabler
in this case we have create var that controls  applying service 

{{- with .Values.serviceAccount.create }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $.Values.serviceAccount.name }}
  labels:
    app: webapp-color
{{- end }}



#Range
For example we have countreis

values.yaml
```
countries:
    - Russia
    - Finland
    - Sweeden
```

And we need to pass it to manifest

data:
    countreis:
    {{- range .Values.countries }}
     - {{.| quote }}
    {{- end }}

# Advanced range with key: value
{{- with .Values.serviceAccount.create }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $.Values.serviceAccount.name }}
  labels:
    {{- range $key, $val := $.Values.serviceAccount.labels }}
    {{ $key }}: {{ $val }}
    {{- end }}
    app: webapp-color
{{- end }}

#Using helpers 

_helper.tpl
it have sections 
For example labels:

{{/*
Common labels
*/}}
{{- define "calico.labels" -}}
helm.sh/chart: {{ include "calico.chart" . }}
{{ include "calico.selectorLabels" . }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}

In chart we can past this by reffer to template

metadata:
  name: calico-node-secret-reader
  labels: {{- include "calico.labels" . | nindent 4 }}
rules:

#Breakdown
include
# we use include instead template for correct idents

"calico.labels" .  
# we need to use period (.) for reffering to data.
# If we don't need to use Chart.AppVersion we skip

 nindent 4
# by default template past without additional ident. We fix it


#Hooks
#typical upgrade path 
#helm comand(delete,update,install) > verify > render > pre-comand comand post-command
# so we will have pre delete and pust delete web hooks.
#How to use it?
# Backup
we need to add to add to backup job an annotaations

annotations:
    "helm.sh/hook": pre-upgrade

#for order multiple hooks we need add weight
annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "5"   # order from -5 -4 ...0 1 2 to 5
#for delete or keep hooked object use
    "helm.sh/hook-delete-policy" hook-succeeded
     # succeeded - delete weebhook after succeed applies
     # failed - delete webhook even if it failed
     # before-hook-creation - default value. Keep first hook and. delete previous hook if new present

# packaging
helm package ./chart_path

#also we can --sign the chart

# uploading
copy tgz to new dir and run helm repo index filedir/ --url https://my_repo/charts
